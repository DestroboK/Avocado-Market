@page "/login"
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Avocado_Market.Data;
<div style="max-width: 400px;">
    <MudCard>
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" OnValidSubmit>
                <MudTextField T="string" Label="Nombre" Required="true" RequiredError="Por favor introduzca un usuario"/>
                <MudTextField T="string" Label="Email" bind-Value="@usuario.Email" Required="true" RequiredError="Por favor introduzca un correo"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "Esta direccion es invalida"})"/>
                <MudTextField T="string" Label="Contraseña" HelperText="Choose a strong password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Por favor introduzca una contraseña"/>
                <MudTextField T="string"
                              Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))"/>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
        </MudCardActions>
    </MudCard>

    <MudExpansionPanels>
        <MudExpansionPanel Text="@($"Errores ({errors.Length})")">
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
</div>

<p>@hola</p>
@code {
    bool success;
    string hola = "";
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

        async Task ProcessSomething()
    {
        hola = "fafwafwaf";
        await Task.Delay(50);

    }



    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Es necesaria una contraseña!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "La contraseña debe tener almenos 8 caracteres.";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "La contraseña debe tener almenos 1 letra mayúscula.";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "La contraseña debe tener almenos 1 letra minúscula.";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "La contraseña debe tener almenos 1 digito.";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
    
    public Usuario usuario = new Usuario();


}