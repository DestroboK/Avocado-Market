@page "/about"

<iframe width="560" height="315" src="https://youtu.be/vUcVR28zlKQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<p>Acceda desde (((<a href="https://youtu.be/vUcVR28zlKQ">aqu√≠</a>))) o desde el boton en el menu de navegacion si ve un error.</p>

<MudCard>
    <MudProgressLinear Color="Color.Primary" Buffer="true" Value="@Value" BufferValue="@BufferValue" Class="my-7" />
    <MudCardMedia Image="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSn7MKlQhAF1FIZK1U9bnP7MIOhMjZnXOzwozgvbuL1j2csThxkvpmgMqdmvxuEzvL5Txs&usqp=CAU" Height="250" />
    <MudCardContent>
        <MudText Typo="Typo.h4">Presentacion</MudText>
        <MudText Typo="Typo.h5">Nombre: Brian Dariel Lorenzo Lorenzo.</MudText>
        <MudText Typo="Typo.h5">Matricula: 2019-8375.</MudText>
        <MudText Typo="Typo.h5">Correo: 20198375@itla.edu.do.</MudText>
        <MudText Typo="Typo.h5">hobby: Escuchar Musica.</MudText>
    </MudCardContent>

    <MudProgressLinear Color="Color.Secondary" Buffer="true" Value="@Value" BufferValue="@BufferValue" Class="my-7" />

    <MudCardMedia Image="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSn7MKlQhAF1FIZK1U9bnP7MIOhMjZnXOzwozgvbuL1j2csThxkvpmgMqdmvxuEzvL5Txs&usqp=CAU" Height="250" />
    <MudCardContent>
        <MudText Typo="Typo.h4">Presentacion</MudText>
        <MudText Typo="Typo.h5">Nombre: Kelvin Ariel Hernandez</MudText>
        <MudText Typo="Typo.h5">Matricula: 2019-8680.</MudText>
        <MudText Typo="Typo.h5">Correo: 20198680@itla.edu.do.</MudText>
        <MudText Typo="Typo.h5">hobby: Leer.</MudText>
    </MudCardContent>

</MudCard>

@code {
    public int Value { get; set; }
    public int BufferValue { get; set; }

    public async void StartTimerAsync()
    {
        if (disposed)
            return;
        Value = 100;
        BufferValue = 100;
        while (Value > 0)
        {
            Value = Value - 4;
            BufferValue = BufferValue - 5;
            StateHasChanged();
            await Task.Delay(500);
            if (disposed)
                return;
        }
        Value = 100;
        BufferValue = 100;
        StartTimerAsync();
    }
    protected override void OnInitialized()
        => StartTimerAsync();

    bool disposed;
    public void Dispose()
    {
        disposed = true;
    }

}



